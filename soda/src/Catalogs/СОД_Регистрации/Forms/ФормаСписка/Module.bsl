&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаПанельРазработчика.Видимость = Ложь;
	Элементы.ГруппаОбозревательДанных.Видимость = Ложь;
	
	ОбновитьЗаголовкиГруппыКомандЗапуска();
	ОбновитьЗаголовкиКоманд();
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельРазработчика(Команда)
	
	ПанельРазработчикаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПанельРазработчикаНаСервере()
	
	Элементы.ГруппаПанельРазработчика.Видимость = Не Элементы.ГруппаПанельРазработчика.Видимость;
	
	Если Элементы.ГруппаПанельРазработчика.Видимость Тогда
		Элементы.ФормаПанельРазработчика.Заголовок = "Панель разработчика <<<";
	Иначе
		Элементы.ФормаПанельРазработчика.Заголовок = "Панель разработчика >>>";
	КонецЕсли;
	
	ОбновитьЗаголовкиГруппыКомандЗапуска();
	ОбновитьЗаголовкиКоманд();
	
КонецПроцедуры

&НаСервере
Процедура Запуск_РегистрацииОбработкаНаСервере(ИмяПоследнейКоманды)
	
	СОД_Синхронизация.РегистрацииОбработка();
	
	ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Запуск_РегистрацииОбработка(Команда)
	Запуск_РегистрацииОбработкаНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Запуск_РегистрацииТочкаАктуальностиНаСервере(ИмяПоследнейКоманды)
	
	СОД_Синхронизация.РегистрацииТочкаАктуальности();
	
	ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Запуск_РегистрацииТочкаАктуальности(Команда)
	Запуск_РегистрацииТочкаАктуальностиНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Запуск_РегистрацииТранспортНаСервере(ИмяПоследнейКоманды)
	
	СОД_Синхронизация.РегистрацииТранспорт();
	
	ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Запуск_РегистрацииТранспорт(Команда)
	Запуск_РегистрацииТранспортНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Запуск_РегистрацииТранспортПодтверждениеНаСервере(ИмяПоследнейКоманды)
	
	СОД_Синхронизация.РегистрацииТранспортПодтверждение();
	
	ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Запуск_РегистрацииТранспортПодтверждение(Команда)
	Запуск_РегистрацииТранспортПодтверждениеНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Запуск_РегистрацииУдалениеНаСервере(ИмяПоследнейКоманды)
	
	СОД_Синхронизация.РегистрацииУдаление();
	
	ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Запуск_РегистрацииУдаление(Команда)
	Запуск_РегистрацииУдалениеНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Запуск_РегистрацииAMQPНаСервере(ИмяПоследнейКоманды)

	СОД_Синхронизация.РегистрацииAMQP();
	
	ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды);

КонецПроцедуры

&НаКлиенте
Процедура Запуск_РегистрацииAMQP(Команда)
	Запуск_РегистрацииAMQPНаСервере(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиГруппыКомандЗапуска(ИмяПоследнейКоманды = Неопределено)
	
	Картинка = БиблиотекаКартинок.Выбрать;
	
	Элементы.Запуск_РегистрацииОбработка.Картинка				= Картинка;
	Элементы.Запуск_РегистрацииТочкаАктуальности.Картинка		= Картинка;
	Элементы.Запуск_РегистрацииТранспорт.Картинка				= Картинка;
	Элементы.Запуск_РегистрацииТранспортПодтверждение.Картинка	= Картинка;
	Элементы.Запуск_РегистрацииУдаление.Картинка				= Картинка;
	Элементы.Запуск_РегистрацииAMQP.Картинка 					= Картинка;
	
	Картинка = БиблиотекаКартинок.ПерейтиВперед;
	
	Если Элементы.Запуск_РегистрацииОбработка.ИмяКоманды = ИмяПоследнейКоманды Тогда		
		Элементы.Запуск_РегистрацииОбработка.Картинка = Картинка;		
	ИначеЕсли Элементы.Запуск_РегистрацииТочкаАктуальности.ИмяКоманды = ИмяПоследнейКоманды Тогда		
		Элементы.Запуск_РегистрацииТочкаАктуальности.Картинка = Картинка;		
	ИначеЕсли Элементы.Запуск_РегистрацииТранспорт.ИмяКоманды = ИмяПоследнейКоманды Тогда		
		Элементы.Запуск_РегистрацииТранспорт.Картинка = Картинка;		
	ИначеЕсли Элементы.Запуск_РегистрацииТранспортПодтверждение.ИмяКоманды = ИмяПоследнейКоманды Тогда		
		Элементы.Запуск_РегистрацииТранспортПодтверждение.Картинка = Картинка;
	ИначеЕсли Элементы.Запуск_РегистрацииУдаление.ИмяКоманды = ИмяПоследнейКоманды Тогда		
		Элементы.Запуск_РегистрацииУдаление.Картинка = Картинка;
	ИначеЕсли Элементы.Запуск_РегистрацииAMQP.ИмяКоманды = ИмяПоследнейКоманды Тогда 
		Элементы.Запуск_РегистрацииAMQP.Картинка = Картинка;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиКоманд()
	
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииОбработка.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииТочкаАктуальности.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииТранспорт.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииТранспортПодтверждение.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииУдаление.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииAMQP.Имя);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКоманды(ИмяРегламентногоЗадания)
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(ИмяРегламентногоЗадания);	
	ИмяКоманды = "Использование_" + Сред(ИмяРегламентногоЗадания, 5); 
	КнопкаФормы = Элементы[ИмяКоманды];
	КнопкаФормы.Пометка = Задание.Использование;
	
	Если КнопкаФормы.Пометка Тогда
		КнопкаФормы.ЦветФона = WebЦвета.СветлоЗеленый;
	Иначе
		КнопкаФормы.ЦветФона = WebЦвета.СветлоСерый;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнвертироватьИспользование(ИмяРегламентногоЗадания)
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(ИмяРегламентногоЗадания);
	Задание.Использование = Не Задание.Использование;
	Задание.Записать();
	
КонецПроцедуры

&НаСервере
Процедура Использование_РегистрацииОбработкаНаСервере()
	
	ИнвертироватьИспользование(Метаданные.РегламентныеЗадания.СОД_РегистрацииОбработка.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииОбработка.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Использование_РегистрацииОбработка(Команда)
	Использование_РегистрацииОбработкаНаСервере();
КонецПроцедуры

&НаСервере
Процедура Использование_РегистрацииТочкаАктуальностиНаСервере()
	
	ИнвертироватьИспользование(Метаданные.РегламентныеЗадания.СОД_РегистрацииТочкаАктуальности.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииТочкаАктуальности.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Использование_РегистрацииТочкаАктуальности(Команда)
	Использование_РегистрацииТочкаАктуальностиНаСервере();
КонецПроцедуры

&НаСервере
Процедура Использование_РегистрацииТранспортНаСервере()
	
	ИнвертироватьИспользование(Метаданные.РегламентныеЗадания.СОД_РегистрацииТранспорт.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииТранспорт.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Использование_РегистрацииТранспорт(Команда)
	Использование_РегистрацииТранспортНаСервере();
КонецПроцедуры

&НаСервере
Процедура Использование_РегистрацииТранспортПодтверждениеНаСервере()
	
	ИнвертироватьИспользование(Метаданные.РегламентныеЗадания.СОД_РегистрацииТранспортПодтверждение.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииТранспортПодтверждение.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Использование_РегистрацииТранспортПодтверждение(Команда)
	Использование_РегистрацииТранспортПодтверждениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура Использование_РегистрацииУдалениеНаСервере()
	
	ИнвертироватьИспользование(Метаданные.РегламентныеЗадания.СОД_РегистрацииУдаление.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииУдаление.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Использование_РегистрацииУдаление(Команда)
	Использование_РегистрацииУдалениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура Использование_РегистрацииAMQPНаСервере()   
	
	ИнвертироватьИспользование(Метаданные.РегламентныеЗадания.СОД_РегистрацииAMQP.Имя);
	ОбновитьЗаголовокКоманды(Метаданные.РегламентныеЗадания.СОД_РегистрацииAMQP.Имя);

КонецПроцедуры

&НаКлиенте
Процедура Использование_РегистрацииAMQP(Команда)
	Использование_РегистрацииAMQPНаСервере();
КонецПроцедуры

&НаСервере
Функция ОбозревательДанныхНаСервере()
	
	Элементы.ГруппаОбозревательДанных.Видимость = Не Элементы.ГруппаОбозревательДанных.Видимость;
	
	Если Элементы.ГруппаОбозревательДанных.Видимость Тогда
		Элементы.ФормаОбозревательДанных.Заголовок = "Обозреватель данных <<<";
	Иначе
		Элементы.ФормаОбозревательДанных.Заголовок = "Обозреватель данных >>>";
	КонецЕсли;	
	
	Возврат ЗаполнитьДеревоДанныхНаСервере(ТекущаяРегистрация);
	
КонецФункции

&НаКлиенте
Процедура ОбозревательДанных(Команда)
	
	ОтправлениеСтруктура = ОбозревательДанныхНаСервере();
	
	Если Элементы.ГруппаОбозревательДанных.Видимость Тогда
		
		ЗаполнитьДеревоДанныхНаКлиенте(ОтправлениеСтруктура);
			
	Иначе
		
		ЭлементыДерева = ДеревоДанных.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = ТекущаяРегистрация Тогда
		Возврат;
	КонецЕсли;
			
	ТекущаяРегистрация = Элемент.ТекущаяСтрока;

	Если Не ЗначениеЗаполнено(Элемент.ТекущаяСтрока)
		Или Не Элементы.ГруппаОбозревательДанных.Видимость Тогда
		
		ЭлементыДерева = ДеревоДанных.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();

		Возврат;
		
	КонецЕсли;
		
	ЗаполнитьДеревоДанных();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДеревоДанныхНаСервере(Регистрация)
	
	Если ЗначениеЗаполнено(Регистрация) Тогда
		
		Если Не ЗначениеЗаполнено(Регистрация.ФорматСообщения) Тогда
			ВызватьИсключение "Пояснение СОД: структура сообщения не получена так как формат сообщения не указан в регистрации.";	
		КонецЕсли;
		
		ОтправлениеСтруктура = СОД_Синхронизация.ЗначениеИзСтроки(Регистрация.ТекстовыеДанные, Регистрация.ФорматСообщения);
			
	Иначе
		ОтправлениеСтруктура = Новый Структура;
	КонецЕсли;
	
	Возврат ОтправлениеСтруктура;
		
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоДанных()
	
	ОтправлениеСтруктура = ЗаполнитьДеревоДанныхНаСервере(ТекущаяРегистрация);
	
	ЗаполнитьДеревоДанныхНаКлиенте(ОтправлениеСтруктура);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДеревоДанныхНаКлиенте(ОтправлениеСтруктура)
	
	// очистим дерево для нового заполнения
	
	ЭлементыДерева = ДеревоДанных.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	// создадим корень
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	НоваяСтрока.Свойство = "ОтправлениеСтруктура";
	НоваяСтрока.Значение = Строка(ОтправлениеСтруктура) + " = " + ОтправлениеСтруктура.Количество();
	НоваяСтрока.Тип 	 = ТипЗнч(ОтправлениеСтруктура);
	
	// заполним рекурсивно
	
	ЗаполнитьДеревоДанныхРекурсивно(НоваяСтрока, ОтправлениеСтруктура);	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоДанныхРекурсивно(УзелДерева, УзелСтруктуры)
	
	ЭлементыДерева = УзелДерева.ПолучитьЭлементы();
	
	Для Каждого Элемент Из УзелСтруктуры Цикл
		
		НоваяСтрока = ЭлементыДерева.Добавить();
		
		Если ТипЗнч(УзелСтруктуры) = Тип("Структура") Тогда
			
			Свойство = Элемент.Ключ;
			Тип 	 = ТипЗнч(Элемент.Значение);
			
			Количество = "";
			
			Если Тип = Тип("Структура") Тогда
				Количество = " = " + Элемент.Значение.Количество();	
			ИначеЕсли  Тип = Тип("Массив") Тогда
				Количество = " = " + Элемент.Значение.Количество();
			КонецЕсли;
			
			Значение = Элемент.Значение;
			
		ИначеЕсли ТипЗнч(УзелСтруктуры) = Тип("Массив") Тогда
			
			Свойство = УзелСтруктуры.Найти(Элемент);
			Тип 	 = ТипЗнч(Элемент);
			
			Количество = "";
			
			Если Тип = Тип("Структура") Тогда
				Количество = " = " + Элемент.Количество();	
			ИначеЕсли  Тип = Тип("Массив") Тогда
				Количество = " = " + Элемент.Количество();
			КонецЕсли;
			
			Значение = Элемент;
			
		КонецЕсли;
		
		НоваяСтрока.Свойство = Свойство;
		НоваяСтрока.Значение = Строка(Значение) + Количество;
		НоваяСтрока.Тип 	 = Тип;
		
		Если Тип = Тип("Массив")
			Или Тип = Тип("Структура") Тогда
			ЗаполнитьДеревоДанныхРекурсивно(НоваяСтрока, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоОбозревателя(Команда)
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
    	ЭлементыДерева = ДеревоДанных.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева = Команда.ПолучитьЭлементы();
	КонецЕсли;
	
    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
        Элементы.ДеревоДанных.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		РазвернутьДеревоОбозревателя(ЭлементДерева);
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоОбозревателя(Команда)
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
    	ЭлементыДерева = ДеревоДанных.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева = Команда.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		СвернутьДеревоОбозревателя(ЭлементДерева);
        Элементы.ДеревоДанных.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакиДляУзла(Команда)
	ОткрытьФорму("Справочник.СОД_Регистрации.Форма.ФормаУстановкиПризнакаДляУзла",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры
