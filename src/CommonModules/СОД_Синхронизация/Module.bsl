////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьМодульСистемы() Экспорт
	
	ИсточникМодуля = СОД_Маршрутизация.ОбработкаОтладкиСистемы();
	
	Если ИсточникМодуля.Тип = Перечисления.СОД_ИсточникиОбработкиПравил.ИзФайла Тогда
		СОД_Обмен = ВнешниеОбработки.Создать(ИсточникМодуля.Источник, Ложь);
	ИначеЕсли ИсточникМодуля.Тип = Перечисления.СОД_ИсточникиОбработкиПравил.ИзКонфигурации Тогда
		СОД_Обмен = Обработки[ИсточникМодуля.Источник].Создать();
	Иначе
		СОД_Обмен = Неопределено;
	КонецЕсли; 
	
	Возврат СОД_Обмен;
	
КонецФункции

////////// РЕГИСТРАЦИИ

// Функция регистрирует изменения для отправки в узел
// Параметры:
//  Узел					- Строка 	- Узел, в который необходимо отправить эту регистрацию
//	Ссылка 					- Строка 	- Ссылка на объект в базе данных
//	ОтправлениеСтруктура 	- Структура - Данные, которые будут отправлены в узел
//	УдалениеОбъекта 		- Булево 	- Флаг определяющий, что объект был безвозвратно удален из базы данных
//	Сеанс					- Число 	- Идентификатор сессии, используется когда выполняется регистрация всей таблицы для полной синхронизации
// Возвращаемое значение: 
//  Строка
//  Ссылка на объект регистрации в базе данных или пустую ссылку в случае неудачи
//
Функция Зарегистрировать(Узел, Ссылка, ОтправлениеСтруктура, УдалениеОбъекта = Ложь) Экспорт
	
	Попытка
		
		ФорматСообщения = Узел.ФорматСообщения;
		
		Если ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.Группа = "РегистрСведений" Тогда
			Наименование 	= ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.Группа + "." + ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.Имя; 
			ГУИД			= ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.ГУИД;
			Имя      		= ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.Имя;
		Иначе
			Наименование 	= Строка(Ссылка); 
			ГУИД			= ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.ГУИД;
			Имя      		= ОтправлениеСтруктура.ТекстовыеДанные.Ссылка.Имя;
		КонецЕсли;
		
		// код справочника является число, по нему сортируются версии
		
		Регистрация = Справочники.СОД_Регистрации.СоздатьЭлемент();
				
		Регистрация.Узел 				= Узел;
		Регистрация.Наименование 		= Наименование;
		Регистрация.ГУИД 				= ГУИД;
		Регистрация.ДвоичныеДанные 		= Новый ХранилищеЗначения(ОтправлениеСтруктура.ДвоичныеДанные); 
		
		Если Не ЗначениеЗаполнено(ФорматСообщения) Тогда
			ВызватьИсключение "Пояснение СОД: регистрация невозможна так как формат сообщения по умолчанию не указан в настройках узла.";
		КонецЕсли;
			
		Регистрация.ТекстовыеДанные 	= ЗначениеВСтроку(ОтправлениеСтруктура, ФорматСообщения);
		
		Регистрация.Метаданные 			= Имя;
		Регистрация.УдалениеОбъекта		= УдалениеОбъекта; // если объект физически удален из базы данных
		Регистрация.Направление			= Перечисления.СОД_НаправлениеРегистрации.Исходящее;
		Регистрация.ДатаРегистрации		= УниверсальноеВремя( ТекущаяДатаСеанса() );
		Регистрация.ФорматСообщения		= ФорматСообщения;
		
		Регистрация.Записать();
				
		Возврат Регистрация.Ссылка;    
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		Возврат Справочники.СОД_Регистрации.ПустаяСсылка();
		
	КонецПопытки;
	
КонецФункции

////////// СЕТЬ

Функция ПолучитьWSПрокси(Узел, Таймаут = 5) Экспорт
	
	Попытка   
		
		МестоположениеWSDL = "http://" + Узел.WEBСервер + ":" + Формат(Узел.WEBПорт, "ЧГ=0") + "/" + Узел.WEBБазаДанных + "/ws/sed_web.1cws?wsdl";
		
		WSОпределения 	= Новый WSОпределения(МестоположениеWSDL, Узел.WEBИмяПользователя, Узел.WEBПароль);
		WSПрокси		= Новый WSПрокси(WSОпределения, Узел.WEBURIПространстваИменСервиса, Узел.WEBИмяСервиса, Узел.WEBИмяТочкиПодключения, , Таймаут);
		
		WSПрокси.Пользователь = Узел.WEBИмяПользователя;
		WSПрокси.Пароль		  = Узел.WEBПароль;	
		
		Возврат WSПрокси;
		
	Исключение
		
		Ошибка = ОписаниеОшибки();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ВыполнитьHSЗапросRun(Узел, Данные = "") Экспорт
	
	HTTP = Новый HTTPСоединение(Узел.HTTPСервер, Узел.HTTPПорт, Узел.HTTPИмяПользователя, Узел.HTTPПароль);
	
	ЗапросPOST = Новый HTTPЗапрос();
	
	ЗапросPOST.АдресРесурса = "/" + Узел.HTTPБазаДанных + "/hs/" + Узел.HTTPИмяСервиса + "/run";	
	ЗапросPOST.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	
	ДобавитьПротоколОбменаРегистрациями(Ложь, Данные);
	
	ЗапросPOST.УстановитьТелоИзСтроки(Данные, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	HTTPОтвет = HTTP.ОтправитьДляОбработки(ЗапросPOST);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат "Успех";
	Иначе
		
		Текст = "HTTPОтвет.КодСостояния = " + HTTPОтвет.КодСостояния + Символы.ПС
		      + "HTTPОтвет.Заголовки: ";
		
		Для Каждого Элемент Из HTTPОтвет.Заголовки Цикл
			Текст = Текст + " - " + Элемент.Ключ + " : " + Элемент.Значение;
		КонецЦикла;
		
		Текст = Текст + Символы.ПС + "HTTPОтвет.ПолучитьТелоКакСтроку(): ";
		Текст = Текст + HTTPОтвет.ПолучитьТелоКакСтроку();
		
		СОД_Общий.СообщитьПользователю(Текст);
		
		Возврат "Неудача";
		
	КонецЕсли;
	
КонецФункции

// RABBITMQ

Процедура ПодключитьКомпонентуAMQP(Версия = "PinkRabbitMQ_v2_1_1_141") Экспорт 
	
	// Доступные версии: 
	
	// PinkRabbitMQ_2_v2_1_1_141
	// PinkRabbitMQ_v2_1_1_141
	// PinkRabbitMQ2_2_v2_1_1_141
	// PinkRabbitMQ2_v2_1_1_141
	// PinkRabbitMQ3_2_v2_1_1_141
	// PinkRabbitMQ3_v2_1_1_141 
	
	Если Не ПодключитьВнешнююКомпоненту("ОбщийМакет." + Версия, "Neo", ТипВнешнейКомпоненты.Native) Тогда 
		
		СОД_Общий.СообщитьПользователю("Не удалось подключить внешнюю компоненту версии: " + Версия); 
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьAMQPКлиент(Узел, Направление, Таймаут = 5) Экспорт
	
	Попытка  
		
		Клиент  = Новый("AddIn.Neo.PinkRabbitMQ");
		
		Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
			Клиент.Connect(Узел.AMQPСервер, Узел.AMQPПорт, Узел.AMQPИмяПользователя, Узел.AMQPПароль, Узел.AMQPИсходящееВиртуальныйХост,,, Таймаут);
		Иначе
			Клиент.Connect(Узел.AMQPСервер, Узел.AMQPПорт, Узел.AMQPИмяПользователя, Узел.AMQPПароль, Узел.AMQPВходящееВиртуальныйХост,,, Таймаут);
		КонецЕсли;
		
		Возврат Клиент;
		
	Исключение  
		
		Ошибка = ОписаниеОшибки();
		
		Клиент = Неопределено;  
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки; 
	
КонецФункции

Процедура ОбновитьМаршрутAMQP(Клиент, Узел, Направление) Экспорт
	
	Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
		
		Клиент.DeclareExchange(Узел.AMQPИсходящееИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);   
		
		Клиент.DeclareQueue(Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт, Ложь, Истина, Ложь, Ложь);		
		Клиент.BindQueue(Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт, 
						 Узел.AMQPИсходящееИмяТочкиОбмена, 
						 Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт
		);  
		
	Иначе  
		
		Клиент.DeclareExchange(Узел.AMQPВходящееИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);   
		
		Клиент.DeclareQueue(Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспорт, Ложь, Истина, Ложь, Ложь);
		Клиент.BindQueue(Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспорт, 
						 Узел.AMQPВходящееИмяТочкиОбмена, 
						 Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспорт 
		); 
		
	КонецЕсли;

КонецПроцедуры 

Процедура ОбновитьМаршрутAMQPПодтверждение(Клиент, Узел, Направление) Экспорт
	
	Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
		
		Клиент.DeclareExchange(Узел.AMQPИсходящееИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);	
		
		Клиент.DeclareQueue(Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение, Ложь, Истина, Ложь, Ложь);
		Клиент.BindQueue(Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение, 
						 Узел.AMQPИсходящееИмяТочкиОбмена, 
						 Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение
		);
		
	Иначе
		
		Клиент.DeclareExchange(Узел.AMQPВходящееИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);	
		
		Клиент.DeclareQueue(Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспортПодтверждение, Ложь, Истина, Ложь, Ложь);
		Клиент.BindQueue(Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспортПодтверждение, 
						 Узел.AMQPВходящееИмяТочкиОбмена, 
						 Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспортПодтверждение
		);
		
	КонецЕсли;

КонецПроцедуры 

Процедура ОбновитьМаршрутAMQPТочкаАктуальности(Клиент, Узел, Направление) Экспорт  
	
	Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
		
		Клиент.DeclareExchange(Узел.AMQPИсходящееИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);	
		
		Клиент.DeclareQueue(Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности, Ложь, Истина, Ложь, Ложь);
		Клиент.BindQueue(Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности, 
						 Узел.AMQPИсходящееИмяТочкиОбмена, 
						 Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности
		);  
		
	Иначе
		
		Клиент.DeclareExchange(Узел.AMQPВходящееИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);	
		
		Клиент.DeclareQueue(Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТочкаАктуальности, Ложь, Истина, Ложь, Ложь);
		Клиент.BindQueue(Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТочкаАктуальности, 
						 Узел.AMQPВходящееИмяТочкиОбмена, 
						 Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТочкаАктуальности
		);  
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТранспортAMQPИсходящее(Клиент, Узел, Сообщение) Экспорт
	
	// Текущая версия компоненты гарантирует доставку сообщения
	// только тогда, когда канал закрывается без ошибки
	
	Клиент.BasicPublish(Узел.AMQPИсходящееИмяТочкиОбмена, 
						Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт, 
						Сообщение, 
						0, 
						Истина
	);
						
	Клиент.BasicCancel("");
	
КонецПроцедуры

Процедура ТранспортПодтверждениеAMQPИсходящее(Клиент, Узел, Сообщение) Экспорт

	// Текущая версия компоненты гарантирует доставку сообщения
	// только тогда, когда канал закрывается без ошибки
	
	Клиент.BasicPublish(Узел.AMQPИсходящееИмяТочкиОбмена, 
						Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение, 
						Сообщение, 
						0, 
						Истина
	);
	
	Клиент.BasicCancel("");	
	
КонецПроцедуры

Процедура ТочкаАктуальностиAMQPИсходящее(Клиент, Узел, Сообщение) Экспорт

	// Текущая версия компоненты гарантирует доставку сообщения
	// только тогда, когда канал закрывается без ошибки
	
	Клиент.BasicPublish(Узел.AMQPИсходящееИмяТочкиОбмена, 
						Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности, 
						Сообщение, 
						0, 
						Истина
	);
	
	Клиент.BasicCancel("");		
	
КонецПроцедуры

// RABBITMQ HTTP API 

Функция ПолучитьAMQPКлиентHTTP(Узел, Таймаут = 5) Экспорт
	
	Попытка 
		
		HTTPСоединение = Новый HTTPСоединение(Узел.AMQPСервер, Узел.AMQPПорт, Узел.AMQPИмяПользователя, Узел.AMQPПароль,, Таймаут);
		
		Возврат HTTPСоединение;
		
	Исключение  
		
		Ошибка = ОписаниеОшибки();  
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки; 
	
КонецФункции

Процедура ОбновитьМаршрутAMQPHTTP(Клиент, Узел, Направление) Экспорт
	
	Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
		
		////////////////////////////////
		// + начало декларации обменника
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена;
		 
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""topic"",""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
		
		// + конец декларации обменника 
		
		//////////////////////////////
		// + начало деклорации очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/queues/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
				
		// - конец декларации очереди 
		
		////////////////////////////////////////
		// + начало привязки обменника и очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/e/"
								+ Узел.AMQPИсходящееИмяТочкиОбмена
								+ "/q/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""" + Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт + """}");
		
		HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
		
		// - конец привязки обменника и очереди 
		
	Иначе 
		
		////////////////////////////////
		// + начало декларации обменника
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена;
		 
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""topic"",""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
		
		// + конец декларации обменника 
		
		//////////////////////////////
		// + начало деклорации очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/queues/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспорт; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
				
		// - конец декларации очереди 
		
		////////////////////////////////////////
		// + начало привязки обменника и очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/e/"
								+ Узел.AMQPВходящееИмяТочкиОбмена
								+ "/q/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспорт; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""" + Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспорт + """}");
		
		HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
				
		// - конец привязки обменника и очереди 
				
	КонецЕсли;

КонецПроцедуры 

Процедура ОбновитьМаршрутAMQPПодтверждениеHTTP(Клиент, Узел, Направление) Экспорт
	
	Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
		
		////////////////////////////////
		// + начало декларации обменника
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена;
		 
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""topic"",""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
		
		// + конец декларации обменника 
		
		//////////////////////////////
		// + начало деклорации очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/queues/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
				
		// - конец декларации очереди 
		
		////////////////////////////////////////
		// + начало привязки обменника и очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/e/"
								+ Узел.AMQPИсходящееИмяТочкиОбмена
								+ "/q/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""" + Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение + """}");
		
		HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
		
		// - конец привязки обменника и очереди
		
	Иначе  
		
		////////////////////////////////
		// + начало декларации обменника
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена;
		 
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""topic"",""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
		
		// + конец декларации обменника 
		
		//////////////////////////////
		// + начало деклорации очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/queues/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспортПодтверждение; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
				
		// - конец декларации очереди 
		
		////////////////////////////////////////
		// + начало привязки обменника и очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/e/"
								+ Узел.AMQPВходящееИмяТочкиОбмена
								+ "/q/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспортПодтверждение; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""" + Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТранспортПодтверждение + """}");
		
		HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
				
		// - конец привязки обменника и очереди 
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьМаршрутAMQPТочкаАктуальностиHTTP(Клиент, Узел, Направление) Экспорт  
	
	Если Направление = Перечисления.СОД_НаправлениеРегистрации.Исходящее Тогда
		
		////////////////////////////////
		// + начало декларации обменника
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена;
		 
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""topic"",""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
		
		// + конец декларации обменника 
		
		//////////////////////////////
		// + начало деклорации очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/queues/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
				
		// - конец декларации очереди 
		
		////////////////////////////////////////
		// + начало привязки обменника и очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/" 
								+ Узел.AMQPИсходящееВиртуальныйХост 
								+ "/e/"
								+ Узел.AMQPИсходящееИмяТочкиОбмена
								+ "/q/" 
								+ Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""" + Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности + """}");
		
		HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
		
		// - конец привязки обменника и очереди 
		
	Иначе    
		
		////////////////////////////////
		// + начало декларации обменника
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена;
		 
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""topic"",""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
		
		// + конец декларации обменника 
		
		//////////////////////////////
		// + начало деклорации очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/queues/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТочкаАктуальности; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = Клиент.Записать(HTTPЗапрос); 
				
		// - конец декларации очереди 
		
		////////////////////////////////////////
		// + начало привязки обменника и очереди
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/" 
								+ Узел.AMQPВходящееВиртуальныйХост 
								+ "/e/"
								+ Узел.AMQPВходящееИмяТочкиОбмена
								+ "/q/" 
								+ Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТочкаАктуальности; 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""" + Узел.AMQPВходящееИмяТочкиОбмена + "." + Узел.AMQPВходящееИмяОчередиТочкаАктуальности + """}");
		
		HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
				
		// - конец привязки обменника и очереди  
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТранспортAMQPИсходящееHTTP(Клиент, Узел, Сообщение) Экспорт
	
	// + начало публикации сообщения
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	
	HTTPЗапрос.АдресРесурса = "/api/exchanges/"
							+ Узел.AMQPИсходящееВиртуальныйХост
							+ "/"
							+ Узел.AMQPИсходящееИмяТочкиОбмена
							+ "/publish"; 
							
	СообщениеAMQP = Новый Структура;
	СообщениеAMQP.Вставить("properties", 		Новый Структура("delivery_mode", 2));
	СообщениеAMQP.Вставить("routing_key", 		Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспорт);
	СообщениеAMQP.Вставить("payload", 			Сообщение);
	СообщениеAMQP.Вставить("payload_encoding", 	"string");
	
	HTTPЗапрос.УстановитьТелоИзСтроки( ЗначениеВСтроку(СообщениеAMQP, Перечисления.СОД_ФорматыСообщений.JSON) );
	
	HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
	
	Результат = ЗначениеИзСтроки( HTTPОтвет.ПолучитьТелоКакСтроку(), Перечисления.СОД_ФорматыСообщений.JSON ); 
	
	Если Результат.Свойство("routed")
		И Результат.routed Тогда
		Возврат "Успех";
	Иначе
		Возврат "Неудача";
	КонецЕсли;
	
	// - конец публикации сообщения
	
КонецФункции

Функция ТранспортПодтверждениеAMQPИсходящееHTTP(Клиент, Узел, Сообщение) Экспорт
	
	// + начало публикации сообщения
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	
	HTTPЗапрос.АдресРесурса = "/api/exchanges/"
							+ Узел.AMQPИсходящееВиртуальныйХост
							+ "/"
							+ Узел.AMQPИсходящееИмяТочкиОбмена
							+ "/publish";  
							
	СообщениеAMQP = Новый Структура;
	СообщениеAMQP.Вставить("properties", 		Новый Структура("delivery_mode", 2));
	СообщениеAMQP.Вставить("routing_key", 		Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТранспортПодтверждение);
	СообщениеAMQP.Вставить("payload", 			Сообщение);
	СообщениеAMQP.Вставить("payload_encoding", 	"string");
	
	HTTPЗапрос.УстановитьТелоИзСтроки( ЗначениеВСтроку(СообщениеAMQP, Перечисления.СОД_ФорматыСообщений.JSON) );
								
	HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
	
	Результат = ЗначениеИзСтроки( HTTPОтвет.ПолучитьТелоКакСтроку(), Перечисления.СОД_ФорматыСообщений.JSON ); 
	
	Если Результат.Свойство("routed")
		И Результат.routed Тогда
		Возврат "Успех";
	Иначе
		Возврат "Неудача";
	КонецЕсли;

	// - конец публикации сообщения	
		
КонецФункции

Функция ТочкаАктуальностиAMQPИсходящееHTTP(Клиент, Узел, Сообщение) Экспорт
	
	// + начало публикации сообщения
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	
	HTTPЗапрос.АдресРесурса = "/api/exchanges/"
							+ Узел.AMQPИсходящееВиртуальныйХост
							+ "/"
							+ Узел.AMQPИсходящееИмяТочкиОбмена
							+ "/publish"; 
							
	СообщениеAMQP = Новый Структура;
	СообщениеAMQP.Вставить("properties", 		Новый Структура("delivery_mode", 2));
	СообщениеAMQP.Вставить("routing_key", 		Узел.AMQPИсходящееИмяТочкиОбмена + "." + Узел.AMQPИсходящееИмяОчередиТочкаАктуальности);
	СообщениеAMQP.Вставить("payload", 			Сообщение);
	СообщениеAMQP.Вставить("payload_encoding", 	"string");
	
	HTTPЗапрос.УстановитьТелоИзСтроки( ЗначениеВСтроку(СообщениеAMQP, Перечисления.СОД_ФорматыСообщений.JSON) );
	
	HTTPОтвет = Клиент.ОтправитьДляОбработки(HTTPЗапрос); 
	
	Результат = ЗначениеИзСтроки( HTTPОтвет.ПолучитьТелоКакСтроку(), Перечисления.СОД_ФорматыСообщений.JSON ); 
	
	Если Результат.Свойство("routed")
		И Результат.routed Тогда
		Возврат "Успех";
	Иначе
		Возврат "Неудача";
	КонецЕсли;

	// - конец публикации сообщения	
	
КонецФункции

////////// ФОРМАТИРОВАНИЕ ДАННЫХ

Функция ПолучитьФорматСообщения(Значение) Экспорт
	
	Если СтрДлина(Значение) > 5 И Сред(Значение, 1, 5) = "{""#"","
		Или СтрДлина(Значение) > 5 И Сред(Значение, 1, 5) = "{""S""," Тогда
		Возврат Перечисления.СОД_ФорматыСообщений.Native1C;
	Иначе
		Возврат Перечисления.СОД_ФорматыСообщений.JSON;
	КонецЕсли;
		
КонецФункции

Функция ЗначениеВСтроку(Значение, ФорматСообщения) Экспорт
	
	Если ФорматСообщения = Перечисления.СОД_ФорматыСообщений.Native1C 
		Или ФорматСообщения = Перечисления.СОД_ФорматыСообщений.ПустаяСсылка() Тогда
	
		Возврат ЗначениеВСтрокуВнутр(Значение); 
		
	ИначеЕсли ФорматСообщения = Перечисления.СОД_ФорматыСообщений.JSON Тогда
		
		ТаблицыЗначенийВМассив(Значение);
		ДатыВСтроки(Значение);		
		ВидыСравненияВСтроку(Значение);
		
		ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет , , , , , , , , Истина);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
		ЗаписатьJSON(ЗаписьJSON, Значение);
		
		Возврат ЗаписьJSON.Закрыть();
		
	Иначе
		
		ВызватьИсключение "Пояснение СОД: не известный формат сообщения.";

	КонецЕсли;
		
КонецФункции

Функция ЗначениеИзСтроки(Строка, ФорматСообщения = "авто") Экспорт
	
	Если ФорматСообщения = "авто" Тогда
		ФорматСообщения = ПолучитьФорматСообщения(Строка);
	КонецЕсли;
	
	Если ФорматСообщения = Перечисления.СОД_ФорматыСообщений.Native1C 
		Или ФорматСообщения = Перечисления.СОД_ФорматыСообщений.ПустаяСсылка() Тогда
		
		Возврат ЗначениеИзСтрокиВнутр(Строка);
		
	ИначеЕсли ФорматСообщения = Перечисления.СОД_ФорматыСообщений.JSON Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Строка);
		
		Значение = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
		
		Возврат Значение;

	Иначе
		
		ВызватьИсключение "Пояснение СОД: не известный формат сообщения.";
		
	КонецЕсли;
		
КонецФункции

Функция ДатыВСтроки(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Пара Из Значение Цикл
			Если ТипЗнч(Пара.Значение) = Тип("Дата") Тогда
				Значение[Пара.Ключ] = Строка(Пара.Значение);
			Иначе
				ДатыВСтроки(Пара.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Номер = 0 По Значение.Количество() - 1 Цикл
			Элемент = Значение[Номер];
			Если ТипЗнч(Элемент) = Тип("Дата") Тогда
				Значение[Номер] = Строка(Элемент);
			Иначе
				ДатыВСтроки(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВидыСравненияВСтроку(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Пара Из Значение Цикл
			Если ТипЗнч(Пара.Значение) = Тип("ВидСравнения") Тогда
				Значение[Пара.Ключ] = Строка(Пара.Значение);
			Иначе
				ВидыСравненияВСтроку(Пара.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Номер = 0 По Значение.Количество() - 1 Цикл
			Элемент = Значение[Номер];
			Если ТипЗнч(Элемент) = Тип("ВидСравнения") Тогда
				Значение[Номер] = Строка(Элемент);
			Иначе
				ВидыСравненияВСтроку(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ТаблицыЗначенийВМассив(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Пара Из Значение Цикл
			Если ТипЗнч(Пара.Значение) = Тип("ТаблицаЗначений") Тогда
				Массив = Новый Массив;
				Для Каждого Строка Из Пара.Значение Цикл
					Структура = Новый Структура;
					Для Каждого Колонка Из Пара.Значение.Колонки Цикл
						ТаблицыЗначенийВМассив(Строка[Колонка.Имя]);
						Структура.Вставить(Колонка.Имя, Строка[Колонка.Имя]);			
					КонецЦикла;
					Массив.Добавить(Структура);
				КонецЦикла;
				Значение[Пара.Ключ] = Массив;
			Иначе
				ТаблицыЗначенийВМассив(Пара.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Номер = 0 По Значение.Количество() - 1 Цикл
			Элемент = Значение[Номер];
			Если ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
				Массив = Новый Массив;
				Для Каждого Строка Из Пара.Значение Цикл
					Структура = Новый Структура;
					Для Каждого Колонка Из Пара.Значение.Колонки Цикл
						ТаблицыЗначенийВМассив(Строка[Колонка.Имя]);
						Структура.Вставить(Колонка.Имя, Строка[Колонка.Имя]);			
					КонецЦикла;
					Массив.Добавить(Структура);
				КонецЦикла;
				Значение[Номер] = Массив;
			Иначе
				ТаблицыЗначенийВМассив(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

////////// ЛОГИРОВАНИЕ НАТИВНЫХ ДАННЫХ

Процедура ДобавитьПротоколОбменаРегистрациями(Входящее, Данные) Экспорт
	
	Если Не СОД_СинхронизацияПовтИсп.ВключитьПротоколОбменаРегистрациями() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные) Тогда
		РегистрацияСтруктура = СОД_Синхронизация.ЗначениеИзСтроки(Данные);
	Иначе
		РегистрацияСтруктура = Новый Структура;
	КонецЕсли;
	
	ХешCRC32 = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешCRC32.Добавить(Данные);

	Дата = УниверсальноеВремя( ТекущаяДатаСеанса() );
	CRC32 = ХешCRC32.ХешСумма;
	Направление = ?(Входящее, Перечисления.СОД_НаправлениеРегистрации.Входящее, Перечисления.СОД_НаправлениеРегистрации.Исходящее);
	
	Набор = РегистрыСведений.СОД_ПротоколОбменаРегистрациями.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Дата);
	Набор.Отбор.CRC32.Установить(CRC32);
	Набор.Отбор.Направление.Установить(Направление);
	
	Запись = Набор.Добавить();
	Запись.Период = Дата;
	Запись.CRC32 = CRC32;
	Запись.Направление = Направление;
	Запись.Данные = Данные;
	
	Попытка
		
		Если РегистрацияСтруктура.Свойство("Ссылка") Тогда
			Если РегистрацияСтруктура.Ссылка.Имя = "СОД_Регистрации" Тогда
				Запись.Регистрация = Справочники.СОД_Регистрации.ПолучитьСсылку(Новый УникальныйИдентификатор(РегистрацияСтруктура.Ссылка.ГУИД));
				Запись.ГУИД 					= РегистрацияСтруктура.Ссылка.ГУИД;
				Запись.Отправлено 				= РегистрацияСтруктура.Отправлено;
				Запись.Обработано 				= РегистрацияСтруктура.Обработано;
				Запись.ОбработкаПодтверждена 	= РегистрацияСтруктура.ОбработкаПодтверждена;
				Запись.ИсходящееПодтверждение 	= РегистрацияСтруктура.ИсходящееПодтверждение;
				Запись.ВходящееПодтверждение 	= РегистрацияСтруктура.ВходящееПодтверждение;
				Запись.Метод 					= РегистрацияСтруктура.Ссылка.Метод;
			ИначеЕсли РегистрацияСтруктура.Ссылка.Имя = "СОД_ТочкиАктуальностиВходящие"
				Или РегистрацияСтруктура.Ссылка.Имя = "СОД_ТочкиАктуальностиИсходящие" Тогда
				Запись.ЭтоТА = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение 
		
		Ошибка = ОписаниеОшибки();
		
	КонецПопытки;
	
	Набор.Записать();
	
КонецПроцедуры

////////// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

Процедура ОтправитьЭлектронноеПисьмоБрокера(ТекстПисьма) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СОД_ПолучателиПисемМонитораБрокера.Получатель КАК Получатель
	               |ИЗ
	               |	РегистрСведений.СОД_ПолучателиПисемМонитораБрокера КАК СОД_ПолучателиПисемМонитораБрокера";
	
	Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
	
	Если Не Получатели.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераSMTP 		= Константы.СОД_МониторБрокера_АдресСервераSMTP.Получить(); 	// "smtp.beget.com"; 
	Профиль.ПортSMTP 				= Константы.СОД_МониторБрокера_ПортSMTP.Получить(); 			// 25;   
	Профиль.ПользовательSMTP 		= Константы.СОД_МониторБрокера_ПользовательSMTP.Получить(); 	// "realtor@neometria.ru";
	Профиль.ПарольSMTP 				= Константы.СОД_МониторБрокера_ПарольSMTP.Получить(); 			//  "qQ9yaf&J";
	
	Профиль.АутентификацияSMTP 		= СпособSMTPАутентификации.ПоУмолчанию;

	// создаем письмо
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.Тема = Константы.СОД_МониторБрокера_Тема.Получить(); 					// "Монитор брокера: realtor";
	Письмо.Отправитель = Константы.СОД_МониторБрокера_Отправитель.Получить(); 		// "realtor@neometria.ru";
	Письмо.ИмяОтправителя = Константы.СОД_МониторБрокера_ИмяОтправителя.Получить(); // "realtor@neometria.ru";
	
	// vvv93rus@gmail.com
	// sergienko@alias-group.ru
	// admin@neometria.ru
	// bida@alias-group.ru
	// vaskovich@neometria.ru
	
	Для Каждого Получатель Из Получатели Цикл
		Письмо.Получатели.Добавить(Получатель);	
	КонецЦикла;
		
	Текст = Письмо.Тексты.Добавить(ТекстПисьма);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	Почта = Новый ИнтернетПочта; 
	
	Почта.Подключиться(Профиль);
	Почта.Послать(Письмо);   
	
	Почта.Отключиться();
	
КонецПроцедуры

////////// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

Процедура РегистрацииТранспорт(СтруктураПараметров = Неопределено) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	
	СОД_Обмен.РегистрацииТранспорт();
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура РегистрацииТранспортПодтверждение(СтруктураПараметров = Неопределено) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	
	СОД_Обмен.РегистрацииТранспортПодтверждение();
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура РегистрацииТочкаАктуальности(СтруктураПараметров = Неопределено) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	
	СОД_Обмен.РегистрацииТочкаАктуальности();
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура РегистрацииОбработка(СтруктураПараметров = Неопределено) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	СОД_Обмен.РегистрацииОбработка();
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура РегистрацииУдаление(СтруктураПараметров = Неопределено) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	СОД_Обмен.РегистрацииУдаление(Константы.СОД_РазмерЖурналаРегистраций.Получить(), Константы.СОД_КоличествоУдаляемыхРегистраций.Получить());
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура РегистрацииAMQP() Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	
	СОД_Обмен.РегистрацииAMQP();
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура МониторБрокера() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СОД_Регистрации.Ссылка,
	               |	СОД_Регистрации.Код,
	               |	СОД_Регистрации.Наименование,
	               |	СОД_Регистрации.Узел,
	               |	СОД_Регистрации.ДатаРегистрации,
	               |	СОД_Регистрации.Направление,
	               |	СОД_Регистрации.Метаданные,
	               |	СОД_Регистрации.ФорматСообщения,
	               |	СОД_Регистрации.ОписаниеОшибки
	               |ИЗ
	               |	Справочник.СОД_Регистрации КАК СОД_Регистрации
	               |ГДЕ
	               |	СОД_Регистрации.Ошибка
	               |	И НЕ СОД_Регистрации.Обработано
	               |	И НЕ СОД_Регистрации.ОшибкаОтправлена";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если Не РезультатЗапроса.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПисьма = "Ошибка обработки регистраций (" + РезультатЗапроса.Количество() + " шт): " + Символы.ПС;
	
	Номер = 0;
	
	Для Каждого СтрокаЗапроса Из РезультатЗапроса Цикл
		
		Номер = Номер + 1;
		
		ТекстПисьма = Символы.ПС + ТекстПисьма + Номер + "." + Символы.ПС;
		
		ТекстПисьма = ТекстПисьма + "Код: " 			+ СтрокаЗапроса.Код 			+ Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Наименование: " 	+ СтрокаЗапроса.Наименование 	+ Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Узел: " 			+ СтрокаЗапроса.Узел 			+ Символы.ПС;
		ТекстПисьма = ТекстПисьма + "ДатаРегистрации: " + СтрокаЗапроса.ДатаРегистрации + Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Направление: " 	+ СтрокаЗапроса.Направление 	+ Символы.ПС;
		ТекстПисьма = ТекстПисьма + "Метаданные: " 		+ СтрокаЗапроса.Метаданные 		+ Символы.ПС;
		ТекстПисьма = ТекстПисьма + "ФорматСообщения: " + СтрокаЗапроса.ФорматСообщения + Символы.ПС;
		ТекстПисьма = ТекстПисьма + "ОписаниеОшибки: " 	+ СтрокаЗапроса.ОписаниеОшибки 	+ Символы.ПС;
		
	КонецЦикла;
	
	// отправляем 
	
	ТекущаяРегистрация = Неопределено;
	
	Попытка
	
		ОтправитьЭлектронноеПисьмоБрокера(ТекстПисьма);	
		
		Для Каждого СтрокаЗапроса Из РезультатЗапроса Цикл
			
			ТекущаяРегистрация = СтрокаЗапроса.Ссылка;
			
			РегистрацияОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();
			РегистрацияОбъект.ОшибкаОтправлена = Истина;
			РегистрацияОбъект.Записать();
			
		КонецЦикла;
	   
	Исключение
		
		ЗаписьЖурналаРегистрации("Данные.Изменение",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.СОД_Регистрации,
			ТекущаяРегистрация,
			ОписаниеОшибки()
		);
			
	КонецПопытки;
	
КонецПроцедуры

////////// ФОНОВЫЕ ЗАДАНИЯ

Процедура РегистрацииТранспортЗапуститьПотоки(ДанныеПолучателя) Экспорт
	
	Ключ = "Регистрации: транспорт (поток): " + ДанныеПолучателя.Узел;
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно));
			
	Если Не МассивЗаданий.Количество() Тогда
		
		Параметры = Новый Массив;
		Параметры.Добавить(ДанныеПолучателя);
		
		ФоновыеЗадания.Выполнить("СОД_Синхронизация.РегистрацииТранспортПоток", Параметры, Ключ, Ключ);

	КонецЕсли;

КонецПроцедуры

Процедура РегистрацииТранспортПоток(ДанныеПолучателя) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	
	//СОД_Обмен.РегистрацииТранспортПоток_Запись(ДанныеПолучателя);
	СОД_Обмен.РегистрацииТранспортПоток_Чтение(ДанныеПолучателя);
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры

Процедура РегистрацииТранспортПодтверждениеЗапуститьПотоки(ДанныеПолучателя) Экспорт
	
	Ключ = "Регистрации: транспорт подтверждение (поток): " + ДанныеПолучателя.Узел;
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно));
			
	Если Не МассивЗаданий.Количество() Тогда
		
		Параметры = Новый Массив;
		Параметры.Добавить(ДанныеПолучателя);
		
		ФоновыеЗадания.Выполнить("СОД_Синхронизация.РегистрацииТранспортПодтверждениеПоток", Параметры, Ключ, Ключ);

	КонецЕсли;

КонецПроцедуры

Процедура РегистрацииТранспортПодтверждениеПоток(ДанныеПолучателя) Экспорт
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_Маршрутизация.ОбработкаОтладкиПравил());
	
	СОД_Обмен.РегистрацииТранспортПодтверждениеПоток_Запись(ДанныеПолучателя);
	СОД_Обмен.РегистрацииТранспортПодтверждениеПоток_Чтение(ДанныеПолучателя);
	
	СОД_Обмен.МодульПравил = Неопределено;
	
КонецПроцедуры
