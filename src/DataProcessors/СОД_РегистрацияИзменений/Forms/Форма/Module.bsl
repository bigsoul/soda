// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// заполним список выбора узлами
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СОД_Узлы.Ссылка
	               |ИЗ
	               |	ПланОбмена.СОД_Узлы КАК СОД_Узлы";
	
	Узлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Узел Из Узлы Цикл
		Элементы.Узел.СписокВыбора.Добавить(Узел, Узел);
	КонецЦикла;
	
	// заполним список выбора типами метаданных
	
	//МодульПравил = Обработки.СОД_ОбработкаОтладкиПравил.Создать();
	
	//Для Каждого Правило Из МодульПравил.СоответствиеМетаданных Цикл
	//	Элементы.ТипМетаданных.СписокВыбора.Добавить(Правило.Ключ, Правило.Ключ);    
	//КонецЦикла;
	
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ЗданияИУчастки", "Справочник_ЗданияИУчастки");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ОбъектыНедвижимости", "Справочник_ОбъектыНедвижимости");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ТипыЗданий", "Справочник_ТипыЗданий");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ТипыЗемельныхУчастков", "Справочник_ТипыЗемельныхУчастков");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ТипыОбъектовНедвижимости", "Справочник_ТипыОбъектовНедвижимости");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ПЛ_Города", "Справочник_ПЛ_Города");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ПЛ_ТипыОплаты", "Справочник_ПЛ_ТипыОплаты");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ПЛ_ДополнительныйИнтерес", "Справочник_ПЛ_ДополнительныйИнтерес");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ПЛ_Отделки", "Справочник_ПЛ_Отделки");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_Контрагенты", "Справочник_Контрагенты");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_Пользователи", "Справочник_Пользователи");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_Организации", "Справочник_Организации");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_ФизическиеЛица", "Справочник_ФизическиеЛица");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Справочник_НЕО_ЦелиПокупки", "Справочник_НЕО_ЦелиПокупки");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Документ_РегистрацияПараметровОбъектовНедвижимости", "Документ_РегистрацияПараметровОбъектовНедвижимости");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Документ_РегистрацияУсловийПродажиОбъектов", "Документ_РегистрацияУсловийПродажиОбъектов");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Документ_ИзменениеСтатусовОбъектов", "Документ_ИзменениеСтатусовОбъектов");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Документ_УПН_СделкаПоНедвижимости", "Документ_УПН_СделкаПоНедвижимости");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("Документ_УПН_ДоговорПоНедвижимости", "Документ_УПН_ДоговорПоНедвижимости");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("ПланВидовХарактеристик_КаналыРекламныхВоздействий", "ПланВидовХарактеристик_КаналыРекламныхВоздействий");
	
	// Евгений + 28.01.2022
	Элементы.ТипМетаданных.СписокВыбора.Добавить("РегистрСведенийНаборЗаписей_УПН_УсловияПродажиОбъектов_СрезПоследних", "РегистрСведенийНаборЗаписей_УПН_УсловияПродажиОбъектов_СрезПоследних");
	Элементы.ТипМетаданных.СписокВыбора.Добавить("РегистрСведенийНаборЗаписей_УПН_СтатусыОбъектов_СрезПоследних", "РегистрСведенийНаборЗаписей_УПН_СтатусыОбъектов_СрезПоследних");
	// Евгений -
	
	ЭлементовВТранзакции = 100;
	
	УстановитьПрогрессРегистраций();
	
КонецПроцедуры

// СОБЫТИЯ ЭЛЕМЕНТОВ

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	СхемаКомпоновкиДанных = ПолучитьМакетСКД(ТипМетаданных);
	
	ТаблицаРезультата = ПолучитьТаблицуРезультатаСКД(ОтборНаФорме, СхемаКомпоновкиДанных);
	
	Результат.Очистить();
	Результат.Загрузить(ТаблицаРезультата);
	
	НомерТранзакции = 1;
	ЭлементовВНомере = 0;
	
	Отнять = Ложь;
	
	Для Каждого Строка Из Результат Цикл
		Отнять = Ложь;
		Строка.НомерТранзакции = НомерТранзакции;
		ЭлементовВНомере = ЭлементовВНомере + 1;
		Если ЭлементовВНомере = ЭлементовВТранзакции Тогда
			ЭлементовВНомере = 0;
			НомерТранзакции = НомерТранзакции + 1;
			Отнять = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяТранзакция = 0;
	
	Если Результат.Количество() Тогда
		Если Отнять Тогда
			НомерТранзакции = НомерТранзакции - 1;
		КонецЕсли;
		КоличествоТранзакций = НомерТранзакции;
	Иначе
		КоличествоТранзакций = 0;
	КонецЕсли;
	
	УстановитьПрогрессРегистраций();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнииНаСервере()
	
	СхемаКомпоновкиДанных = ПолучитьМакетСКД(ТипМетаданных);
	
	ТаблицаРезультата = ПолучитьТаблицуРезультатаСКД(ОтборНаФорме, СхемаКомпоновкиДанных);
	
	СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
	СОД_Обмен.Инициализировать(СОД_МаршрутизацияВызовСервераПовтИсп.ОбработкаОтладкиПравил());
	
	ОтправлениеСтруктура = Новый Структура;
	ОтправлениеСтруктура.Вставить("Маршрут",			Неопределено);
	ОтправлениеСтруктура.Вставить("ДвоичныеДанные",		Неопределено);
	ОтправлениеСтруктура.Вставить("ТекстовыеДанные",	Неопределено);
	
	Если ТипМетаданных = "РегистрСведенийНаборЗаписей_УПН_СтатусыОбъектов_СрезПоследних" Тогда
		
		ЭтаСтруктура = Новый Структура;
		
		СтруктураСсылка = Новый Структура;
		СтруктураСсылка.Вставить("Группа",	"РегистрСведений");
		СтруктураСсылка.Вставить("Имя",		"УПН_СтатусыОбъектов");
		СтруктураСсылка.Вставить("ГУИД",	"000000000000000000");
		
		ЭтаСтруктура.Вставить("Ссылка",	СтруктураСсылка);
		ЭтаСтруктура.Вставить("Отбор",	Новый Структура);
		ЭтаСтруктура.Вставить("Набор", 	Новый Массив);
		
		Для Каждого Строка Из ТаблицаРезультата Цикл
			
			ЗаписьСтруктура = Новый Структура;
			ЗаписьСтруктура.Вставить("ОбъектНедвижимости",	СОД_Обмен.МодульПравил.Справочник_УПН_ОбъектыНедвижимости_Чтение(Строка.ОбъектНедвижимости));
			ЗаписьСтруктура.Вставить("Статус", 				СОД_Обмен.МодульПравил.Перечисление_УПН_СтатусыОбъектов_Чтение(Строка.Статус));
			ЗаписьСтруктура.Вставить("Период", 				УниверсальноеВремя( ТекущаяДатаСеанса() ));
			
			ЭтаСтруктура.Набор.Добавить(ЗаписьСтруктура);
			
		КонецЦикла;
		
		ОтправлениеСтруктура.ТекстовыеДанные = ЭтаСтруктура;
		
	ИначеЕсли ТипМетаданных = "РегистрСведенийНаборЗаписей_УПН_УсловияПродажиОбъектов_СрезПоследних" Тогда
		
		ЭтаСтруктура = Новый Структура;
		
		СтруктураСсылка = Новый Структура;
		СтруктураСсылка.Вставить("Группа",	"РегистрСведений");
		СтруктураСсылка.Вставить("Имя",		"УПН_УсловияПродажиОбъектов");
		СтруктураСсылка.Вставить("ГУИД",	"000000000000000000");
		
		ЭтаСтруктура.Вставить("Ссылка",	СтруктураСсылка);
		ЭтаСтруктура.Вставить("Отбор",	Новый Структура);
		ЭтаСтруктура.Вставить("Набор", 	Новый Массив);
		
		Для Каждого Строка Из ТаблицаРезультата Цикл
			
			ЗаписьСтруктура = Новый Структура;
			ЗаписьСтруктура.Вставить("ОбъектНедвижимости",					СОД_Обмен.МодульПравил.Справочник_УПН_ОбъектыНедвижимости_Чтение(Строка.ОбъектНедвижимости));
			ЗаписьСтруктура.Вставить("Стоимость", 							Строка.Стоимость);
			ЗаписьСтруктура.Вставить("ЦенаЗаКвМ",							Строка.ЦенаЗаКвМ);
			ЗаписьСтруктура.Вставить("КоличествоКомнатДляПродажиАренды",	Строка.КоличествоКомнатДляПродажиАренды);
			ЗаписьСтруктура.Вставить("ТипПродажи",							СОД_Обмен.МодульПравил.Перечисление_УПН_ТипыПродажиОбъектовНедвижимости_Чтение(Строка.ТипПродажи));
			ЗаписьСтруктура.Вставить("ВозможнаИпотека",						Строка.ВозможнаИпотека);
			ЗаписьСтруктура.Вставить("ПереуступкаПрав",						Строка.ПереуступкаПрав);
			ЗаписьСтруктура.Вставить("ЦенаВключаетНДС",						Строка.ЦенаВключаетНДС);
			ЗаписьСтруктура.Вставить("Период", 								УниверсальноеВремя( ТекущаяДатаСеанса() ));
			
			ЭтаСтруктура.Набор.Добавить(ЗаписьСтруктура);
			
		КонецЦикла;
		
		ОтправлениеСтруктура.ТекстовыеДанные = ЭтаСтруктура;
		
	КонецЕсли;
	
	СОД_Обмен.Деинициализировать();
	
	СтрокаДанных = ЗначениеВСтрокуВнутр(ОтправлениеСтруктура);
	
	Результат.Очистить();
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Ссылка = СтрокаДанных;
	
	УстановитьПрогрессРегистраций();
		
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ТипМетаданных = "РегистрСведенийНаборЗаписей_УПН_УсловияПродажиОбъектов_СрезПоследних" Или ТипМетаданных = "РегистрСведенийНаборЗаписей_УПН_СтатусыОбъектов_СрезПоследних" Тогда
		ЗаполнитьПоследнииНаСервере();
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТипМетаданныхПриИзмененииНаСервере()
	
	СхемаКомпоновкиДанных = ПолучитьМакетСКД(ТипМетаданных);
	
	ЗагрузитьНастройкиСКД(ОтборНаФорме, СхемаКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипМетаданныхПриИзменении(Элемент)
	ТипМетаданныхПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьНаСервере(Ссылки)
	
	НачатьТранзакцию();
	
	Для Каждого Ссылка Из Ссылки Цикл
			
		// создадим и инициализируем правила обмена
		
		СОД_Обмен = СОД_Синхронизация.ПолучитьМодульСистемы();
		СОД_Обмен.Инициализировать(СОД_МаршрутизацияВызовСервераПовтИсп.ОбработкаОтладкиПравил());
		
		// получим структуру объекта
		
		ОтправлениеСтруктура = СОД_Обмен.ЗаполнитьОтправление(Ссылка);
		
		// уничтожим циклические ссылки и приведем обработку обмена в состояние не инициализированна/готова к повторной инициализации
		
		СОД_Обмен.Деинициализировать();
		
		// проверим, что правила позваляют создавать регистрацию на этот объект  	
		
		Если ОтправлениеСтруктура.ДвоичныеДанные = Неопределено
			И ОтправлениеСтруктура.ТекстовыеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// зарегистрируем регистрацию на узел получатель
		
		УзлыПолучатели = Новый Массив;
		УзлыПолучатели.Добавить(Узел);

		Для Каждого УзелПолучатель Из УзлыПолучатели Цикл
			//Если Не УзелПолучатель.Отключен Тогда
				Если Не ЗначениеЗаполнено(СОД_Синхронизация.Зарегистрировать(УзелПолучатель, Ссылка, ОтправлениеСтруктура)) Тогда
					ВызватьИсключение "Пояснение СОД: Не удалось зарегистрировать объект для отправки. Запись отменена.";
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьНаСервереПоследнии(Ссылки)
	
	НачатьТранзакцию();
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		ОтправлениеСтруктура = ЗначениеИзСтрокиВнутр(Ссылка);
		
		УзлыПолучатели = Новый Массив;
		УзлыПолучатели.Добавить(Узел);

		Для Каждого УзелПолучатель Из УзлыПолучатели Цикл
			Если Не ЗначениеЗаполнено(СОД_Синхронизация.Зарегистрировать(УзелПолучатель, Неопределено, ОтправлениеСтруктура)) Тогда
				ВызватьИсключение "Пояснение СОД: Не удалось зарегистрировать объект для отправки. Запись отменена.";
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНаКлиенте(Ссылки)
	Массив = Новый Массив;
	Для Каждого Элемент Из Ссылки Цикл
		Массив.Добавить(Элемент);
	КонецЦикла;
	
	Если ТипМетаданных = "РегистрСведенийНаборЗаписей_УПН_УсловияПродажиОбъектов_СрезПоследних" Или ТипМетаданных = "РегистрСведенийНаборЗаписей_УПН_СтатусыОбъектов_СрезПоследних" Тогда
		ЗарегистрироватьНаСервереПоследнии(Массив);
	Иначе
		ЗарегистрироватьНаСервере(Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	Данные = Новый Соответствие;
	
	Для Каждого Строка Из Результат Цикл
		
		Если Строка.Зарегистрирован Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылки = Данные[Строка.НомерТранзакции];
		
		Если Ссылки = Неопределено Тогда
			Ссылки = Новый Массив;
			Данные[Строка.НомерТранзакции] = Ссылки;
		КонецЕсли;
		
		Ссылки.Добавить(Строка.Ссылка);
		
	КонецЦикла;
	
	Для Каждого Пара Из Данные Цикл
		
		ТекущаяТранзакция = ТекущаяТранзакция + 1;
		
		УстановитьПрогрессРегистраций();
		
		ЗарегистрироватьНаКлиенте(Пара.Значение);
		
		Для Каждого Строка Из Результат Цикл
			Если Строка.НомерТранзакции = Пара.Ключ Тогда
				Строка.Зарегистрирован = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// ОБЩИЕ ВСПОМОГАТЕЛЬНЫЕ

&НаСервере
Процедура УстановитьПрогрессРегистраций()
	
	Элементы.Зарегистрировать.Заголовок = "Зарегистрировать (" + ТекущаяТранзакция + "/" + КоличествоТранзакций + ")";
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиСКД(ОтборНаФорме, СхемаКомпоновкиДанных)
		
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборНаФорме.Инициализировать(ИсточникНастроек);
	
	ОтборНаФорме.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуРезультатаСКД(ОтборНаФорме, СхемаКомпоновкиДанных)
			
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОтборНаФорме.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаРезультата;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетСКД(ИмяМакета)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбработкаОбъект.ПолучитьМакет(ИмяМакета);

КонецФункции
