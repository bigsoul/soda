// ЭЛЕМЕНТЫ УПРАВЛЕНИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипТранспорта = "HTTP";
	
КонецПроцедуры

// Подключение
//
&НаСервере
Процедура ПодключитьНаСервере()
	
	Если ТипТранспорта = "HTTP" Тогда  
		
		HTTP = Новый HTTPСоединение("neosrv1c", 15672, "sod", "7852396541");
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.АдресРесурса = "/api/overview";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
		HTTPОтвет = HTTP.Получить(HTTPЗапрос);
		
		//ЗапросPOST = Новый HTTPЗапрос();
		//
		//ЗапросPOST.АдресРесурса = "/" + Узел.HTTPБазаДанных + "/hs/" + Узел.HTTPИмяСервиса + "/run";	
		//ЗапросPOST.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		//
		//ЗапросPOST.УстановитьТелоИзСтроки(Данные, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		//
		//HTTPОтвет = HTTP.ОтправитьДляОбработки(ЗапросPOST);
		
		СОД_Общий.СообщитьПользователю("Код состояния ответа: " + HTTPОтвет.КодСостояния);
		
	Иначе
		
		//ПодключитьКомпоненту("PinkRabbitMQ_2_v2_1_1_141"); // err
		ПодключитьКомпоненту("PinkRabbitMQ_v2_1_1_141"); // ok
		//ПодключитьКомпоненту("PinkRabbitMQ2_2_v2_1_1_141"); //err
		//ПодключитьКомпоненту("PinkRabbitMQ2_v2_1_1_141"); // err
		//ПодключитьКомпоненту("PinkRabbitMQ3_2_v2_1_1_141"); // err
		//ПодключитьКомпоненту("PinkRabbitMQ3_v2_1_1_141"); // err      
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	ПодключитьНаСервере();
КонецПроцедуры

// Отправление сообщения
//
&НаСервере
Процедура ОтправитьНаСервере()
	
	// Создание очереди, отправка сообщения
	
	Если ТипТранспорта = "HTTP" Тогда  
		
		ОбновитьМаршрут();	
		ОтправитьСообщение(,,, Строка("ТА: " + УниверсальноеВремя( ТекущаяДатаСеанса() ))); 
		
	Иначе
		
	    Клиент  = ПолучитьКлиента("PinkRabbitMQ_v2_1_1_141"); 
		
		ОбновитьМаршрут(Клиент);
		ОтправитьСообщение(Клиент,,, Строка("ТА: " + УниверсальноеВремя( ТекущаяДатаСеанса() )));       
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	ОтправитьНаСервере();
КонецПроцедуры

// Получение сообщения
//
&НаСервере
Процедура ПолучитьНаСервере()
	
	// Создание очереди, отправка и получение сообщения на клиенте
	
	Если ТипТранспорта = "HTTP" Тогда
		
		Сообщение = ПолучитьСообщение(,,, Подтверждать);
		
		Если Сообщение <> Неопределено Тогда 
			СОД_Общий.СообщитьПользователю("Из очереди прочитано сообщение: " + Сообщение);
		Иначе
			СОД_Общий.СообщитьПользователю("Очередь пустая.")
		КонецЕсли;	
		
	Иначе
		
		Клиент  = ПолучитьКлиента("PinkRabbitMQ_v2_1_1_141");
		
		Сообщение = ПолучитьСообщение(Клиент,,, Подтверждать);
		
		Если Сообщение <> Неопределено Тогда 
			СОД_Общий.СообщитьПользователю("Из очереди прочитано сообщение: " + Сообщение);
		Иначе
			СОД_Общий.СообщитьПользователю("Очередь пустая.")
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Получить(Команда)
	ПолучитьНаСервере();
КонецПроцедуры

// ВЗАИМОДЕЙСТВИЕ С RABBITMQ

&НаСервере
Процедура ПодключитьКомпоненту(Версия) 
	
	// Доступные версии: 
	
	// PinkRabbitMQ_2_v2_1_1_141
	// PinkRabbitMQ_v2_1_1_141
	// PinkRabbitMQ2_2_v2_1_1_141
	// PinkRabbitMQ2_v2_1_1_141
	// PinkRabbitMQ3_2_v2_1_1_141
	// PinkRabbitMQ3_v2_1_1_141
	
	Если Версия = "PinkRabbitMQ_2_v2_1_1_141" Тогда
				
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ_2_v2_1_1_141", "Neo", ТипВнешнейКомпоненты.Native) Тогда 
			
			ПолучитьКлиента("PinkRabbitMQ_2_v2_1_1_141");
			
			СОД_Общий.СообщитьПользователю(Версия + ": Подключено !");
			
		Иначе  
			
			СОД_Общий.СообщитьПользователю(Версия + ": Не удалось подключить внешнюю компоненту !"); 
			
		КонецЕсли; 
		
	ИначеЕсли Версия = "PinkRabbitMQ_v2_1_1_141" Тогда
			
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ_v2_1_1_141", "Neo", ТипВнешнейКомпоненты.Native) Тогда  
			
			ПолучитьКлиента("PinkRabbitMQ_v2_1_1_141");
			
			СОД_Общий.СообщитьПользователю(Версия + ": Подключено !");

		Иначе 
			
			СОД_Общий.СообщитьПользователю(Версия + ": Не удалось подключить внешнюю компоненту !");  
			
		КонецЕсли; 
		
	ИначеЕсли Версия = "PinkRabbitMQ2_2_v2_1_1_141" Тогда
			
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ2_2_v2_1_1_141", "Neo", ТипВнешнейКомпоненты.Native) Тогда 
			
			ПолучитьКлиента("PinkRabbitMQ2_2_v2_1_1_141");
			
			СОД_Общий.СообщитьПользователю(Версия + ": Подключено !");

		Иначе     
			
			СОД_Общий.СообщитьПользователю(Версия + ": Не удалось подключить внешнюю компоненту !"); 
			
		КонецЕсли;
		
	ИначеЕсли Версия = "PinkRabbitMQ2_v2_1_1_141" Тогда
		
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ2_v2_1_1_141", "Neo", ТипВнешнейКомпоненты.Native) Тогда  
			
			ПолучитьКлиента("PinkRabbitMQ2_v2_1_1_141"); 
			
			СОД_Общий.СообщитьПользователю(Версия + ": Подключено !");

		Иначе
			
			СОД_Общий.СообщитьПользователю(Версия + ": Не удалось подключить внешнюю компоненту !"); 
			
		КонецЕсли; 
		
	ИначеЕсли Версия = "PinkRabbitMQ3_2_v2_1_1_141" Тогда
			
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ3_2_v2_1_1_141", "Neo", ТипВнешнейКомпоненты.Native) Тогда  
			
			ПолучитьКлиента("PinkRabbitMQ3_2_v2_1_1_141");
			
			СОД_Общий.СообщитьПользователю(Версия + ": Подключено !");

		Иначе      
			
			СОД_Общий.СообщитьПользователю(Версия + ": Не удалось подключить внешнюю компоненту !"); 
			
		КонецЕсли; 
		
	ИначеЕсли Версия = "PinkRabbitMQ3_v2_1_1_141" Тогда
			
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ3_v2_1_1_141", "Neo", ТипВнешнейКомпоненты.Native) Тогда 
			
			ПолучитьКлиента("PinkRabbitMQ3_v2_1_1_141"); 
			
			СОД_Общий.СообщитьПользователю(Версия + ": Подключено !");

		Иначе  
			
			СОД_Общий.СообщитьПользователю(Версия + ": Не удалось подключить внешнюю компоненту !");
			
		КонецЕсли;   
		
	Иначе 
		
		СОД_Общий.СообщитьПользователю("Версия компоненты не зарегистрирована: " + Версия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлиента(Версия)
	
	Попытка  
		
		Клиент  = Новый("AddIn.Neo.PinkRabbitMQ"); 
		Клиент.Connect("127.0.0.1", 5672, "sod", "7852396541", "1c");
		
		Возврат Клиент;
		
	Исключение  
		
		Ошибка = ОписаниеОшибки();
		
		СОД_Общий.СообщитьПользователю(Версия + ": " + Ошибка);  
		
		ВызватьИсключение Версия + ": " + Ошибка;
		
	КонецПопытки; 
			
КонецФункции

&НаСервере
Процедура ОбновитьМаршрут(Клиент = Неопределено, ИмяТочкиОбмена = "1c.default", ИмяОчереди = "anonymous")
	
	Если ТипТранспорта = "HTTP" Тогда  
		
		// + начало декларации обменника
		
		HTTP = Новый HTTPСоединение("neosrv1c", 15672, "sod", "7852396541");
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/1c/my-new-exchange";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8"); 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""type"":""direct"",""durable"":true}");
		
		HTTPОтвет = HTTP.Записать(HTTPЗапрос); 
		
		СОД_Общий.СообщитьПользователю("Декларация обменника: " + HTTPОтвет.КодСостояния);
		
		// + конец декларации обменника
		
		// + начало деклорации очереди
		
		//HTTP = Новый HTTPСоединение("neosrv1c", 15672, "sod", "7852396541");
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.АдресРесурса = "/api/queues/1c/new-queuer";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8"); 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""auto_delete"":false,""durable"":true}");
		
		HTTPОтвет = HTTP.Записать(HTTPЗапрос); 
		
		СОД_Общий.СообщитьПользователю("Декларация очереди: " + HTTPОтвет.КодСостояния);
		
		// - конец декларации очереди 
		
		// + начало привязки обменника и очереди
		
		//HTTP = Новый HTTPСоединение("neosrv1c", 15672, "sod", "7852396541");
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.АдресРесурса = "/api/bindings/1c/e/my-new-exchange/q/new-queuer";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8"); 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""routing_key"":""routing.key""}");
		
		HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос); 
		
		СОД_Общий.СообщитьПользователю("Привязка очереди к обменнику: " + HTTPОтвет.КодСостояния);
		
		// - конец привязки обменника и очереди 
		
	Иначе
		
		Клиент.DeclareExchange(ИмяТочкиОбмена, "topic", Ложь, Истина, Ложь);
		Клиент.DeclareQueue(ИмяОчереди, Ложь, Истина, Ложь, Ложь);
		Клиент.BindQueue(ИмяОчереди, ИмяТочкиОбмена, ИмяОчереди);   
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщение(Клиент = Неопределено, ИмяТочкиОбмена = "1c.default", ИмяОчереди = "anonymous", Сообщение = "")
	
	Если ТипТранспорта = "HTTP" Тогда  
		
		// + начало публикации сообщения
		
		HTTP = Новый HTTPСоединение("neosrv1c", 15672, "sod", "7852396541");
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.АдресРесурса = "/api/exchanges/1c/my-new-exchange/publish";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8"); 
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""properties"":{},""routing_key"":""routing.key"",""payload"":"" + Сообщение + "",""payload_encoding"":""string""}");
		
		HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос); 
		
		СОД_Общий.СообщитьПользователю("Публикация сообщения: " + HTTPОтвет.КодСостояния);
		
		// - конец публикации сообщения
		
	Иначе
		
		Клиент.BasicPublish(ИмяТочкиОбмена, ИмяОчереди, Сообщение, 0, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСообщение(Клиент = Неопределено, ИмяТочкиОбмена = "1c.default", ИмяОчереди = "anonymous", Подтверждать = Ложь)
	
	Если ТипТранспорта = "HTTP" Тогда 
		
		// + начало получения сообщения
		
		HTTP = Новый HTTPСоединение("neosrv1c", 15672, "sod", "7852396541");
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.АдресРесурса = "/api/queues/1c/new-queuer/get";
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8"); 
		
		Режим = ?(Подтверждать, "ack_requeue_false", "ack_requeue_true");
		
		HTTPЗапрос.УстановитьТелоИзСтроки("{""count"":1,""ackmode"":""" + Режим + """,""encoding"":""auto"",""truncate"":50000}");
		
		HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос); 
		
		СОД_Общий.СообщитьПользователю("Получено сообщение: " + HTTPОтвет.КодСостояния);
		
		// - конец получения сообщения
	
	Иначе
		
		Сообщение = "";
		ОтветноеСообщение = "";
		ТегСообщения = 0;

	    Попытка
			
			Потребитель = Клиент.BasicConsume(ИмяОчереди, "", Ложь, Ложь, 1);
			
			Прочитано = Клиент.BasicConsumeMessage(ИмяТочкиОбмена, ОтветноеСообщение, ТегСообщения, 2000);
			
			//Сообщить("Тег сообщения: " + ТегСообщения);
			
			Если Прочитано Тогда
				
				Если Подтверждать Тогда
					Клиент.BasicAck(ТегСообщения);
				КонецЕсли;
				
				Сообщение = Строка(ОтветноеСообщение);
				
				ОтветноеСообщение 	= ""; 	// Обнуляем, чтобы избежать утечку памяти
	            ТегСообщения 		= 0; 	// Обнуляем, чтобы избежать утечку памяти   
				
			КонецЕсли;  
			
	        Клиент.BasicCancel(""); 
			
			Если Не Прочитано Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		Исключение
			
			Ошибка = Клиент.GetLastError();
			
	        СОД_Общий.СообщитьПользователю(Ошибка); 
			
			ВызватьИсключение Ошибка;
			
		КонецПопытки; 
		
		Возврат "[" + ТегСообщения + "]: " + Сообщение;      
		
	КонецЕсли;

КонецФункции